'''
* 표준 출력 함수 print()
()안에 출력하고 싶은 변수, 리터럴 상수(쌩숫자), 수식 등을 적으면
터미널에 텍스트를 출력합니다.
'''

# 출력할 데이터가 여러 개라면 괄호 안에 출력할 데이터들을
# 콤마로 나열해서 작성합니다.
# 여러 개의 값들을 '공백'과 함께 가로로 나란히 출력합니다.
dog = '멍멍이'
cat = '야옹이'
print(dog, cat, '좋아용>_<') 

print('----------------------------------------')

'''
- print함수 내부에는 sep이라는 속성이 존재합니다.
- sep은 separator의 약자로 구분자 라고도 부릅니다.
- sep 속성은 기본값이 ' '(공백 문자열)로 지정되어 있으며
 만약 변경을 원한다면 sep 속성을 직접 작성하여 변경합니다.
'''
# print(dog, cat, '좋아용>_<', sep=' ') -> 기본값 # 멍멍이 야옹이 좋아용>_<
print(dog, cat, '좋아용>_<', sep='') #멍멍이야옹이좋아용>_<




'''
- end 속성은 데이터 출력 이후 맨 끝에 포함할 문자를
지정하는 용도입니다.

- 기본값은 '\n'이 지정되어 있기 때문에
print 함수를 쓸 때마다 자동으로 줄 개행이 되는 것처럼 보이는 겁니다.
'''

# print(dog, cat, '좋아용>_<', end='\n') -> 기본값
print(dog, cat, '좋아용>_<', end='!!!')
print('이 문장은 줄 개행이 되어서 나올까요?') # 앞선 print에서 줄개행 탈출코드를 넣지 않아서 그 다음에 오는 print는 줄개행이 안일어남
print('얘는용? ') # 얘 직전 print는 따로 설정하지 않아서 얘는 줄개행이 되어 나옴.

print(dog, cat, '좋아용~>_<', end='', sep='->')
print('메롱')

# 주의! 출력할 내용이 먼저 전달되고 end, sep 등 속성을 설정해야 한다.
# print( end='', sep='->', dog, cat, '좋아용~>_<') -> 에러!
